package com.example.PLDSMARTBackEnd.Controller;

import com.example.PLDSMARTBackEnd.Model.User;
import com.example.PLDSMARTBackEnd.Repository.UserRepository;
import com.example.PLDSMARTBackEnd.util.UtilLDAP;
import com.unboundid.util.json.JSONString;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.ldap.core.AttributesMapper;
import org.springframework.ldap.core.LdapTemplate;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.client.HttpServerErrorException;
import org.springframework.web.multipart.MultipartFile;

import javax.naming.NameAlreadyBoundException;
import javax.naming.NamingException;
import javax.naming.directory.Attribute;
import javax.naming.directory.Attributes;
import javax.naming.directory.BasicAttribute;
import javax.naming.directory.BasicAttributes;

import java.util.List;
import static org.springframework.ldap.query.LdapQueryBuilder.query;


@CrossOrigin
@RequestMapping(path = "/user")
@Controller
public class UserController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @Autowired
    private LdapTemplate ldapTemplate;

    @PostMapping(path="/add", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    public @ResponseBody
    String addNewUser (@RequestBody User user) throws NameAlreadyBoundException {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        if (user.getFirstName() == "" || user.getLastName() == ""
                || user.getEmail() == "" || user.getHashPassword() == "") {
            return "Parametre(s) incorrect(s).";
        }

        //----- LDAP -----
        Attribute objectClass = new BasicAttribute("objectClass");
        {
            objectClass.add("top");
            objectClass.add("person");
            objectClass.add("organizationalPerson");
            objectClass.add("inetOrgPerson");
        }
        Attributes userAttributes = new BasicAttributes();
        userAttributes.put(objectClass);
        userAttributes.put("cn", user.getFirstName() + " " + user.getLastName());
        userAttributes.put("sn", user.getLastName());
        userAttributes.put("uid", user.getEmail());
        userAttributes.put("password", user.getHashPassword());
        ldapTemplate.bind(UtilLDAP.generateUserDN(user.getEmail()), null, userAttributes);
        //----- LDAP -----

        userRepository.save(user);

        //"{ \"response\" : \"saved\"}"
        return new JSONString("saved").toString(); // TODO : Faire le message d'erreur en cas d'Ã©chec de l'ajout (boolean ?)
    }

    @GetMapping(path="/all")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }

    @GetMapping(path="/authentication")
    public @ResponseBody User authenticate(@RequestParam String email, @RequestParam String password) throws HttpServerErrorException
    {

        /*
        String filter = "(&(objectclass=person)(uid=" + email + "))";
        boolean auth = ldapTemplate.authenticate(UtilLDAP.generateUserDN(email), filter, password);
        if(auth == true){
            User u = userRepository.findByMail(email);
            return u;
        }else {
            throw new HttpServerErrorException(HttpStatus.NOT_FOUND);
        }*/
        List<String> userList = ldapTemplate.search(query().base(UtilLDAP.generateUserDN(email)).where("uid").is(email),
                new AttributesMapper<String>() {
                    public String mapFromAttributes(Attributes attrs)
                            throws NamingException {
                        return (String) attrs.get("password").get();
                    }
                });
        if(userList.isEmpty()){
            throw new HttpServerErrorException(HttpStatus.NOT_FOUND);
        }else {
            String hashedPassword = userList.get(0);
            BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder(10);
            if (passwordEncoder.matches(password,hashedPassword)) {
                User u = userRepository.findByMail(email);
                return u;
            } else{
                throw new HttpServerErrorException(HttpStatus.NOT_FOUND);
            }
        }
    }

    @PostMapping(path="/update")
    public @ResponseBody User update(@RequestBody User userUpdated){

        User u = userRepository.findByMail(userUpdated.getEmail());
        String oldEmail = u.getEmail();

        u.setBiography(userUpdated.getBiography());
        u.setEmail(userUpdated.getEmail());
        u.setFirstName(userUpdated.getFirstName());
        u.setLastName(userUpdated.getLastName());
        u.setHashPassword(userUpdated.getHashPassword());


        Attribute objectClass = new BasicAttribute("objectClass");
        {
            objectClass.add("top");
            objectClass.add("person");
            objectClass.add("organizationalPerson");
            objectClass.add("inetOrgPerson");
        }

        Attributes userAttributes = new BasicAttributes();
        userAttributes.put(objectClass);
        userAttributes.put("cn", u.getFirstName() + " " + u.getLastName());
        userAttributes.put("sn", u.getLastName());
        userAttributes.put("uid", u.getEmail());
        userAttributes.put("password", u.getHashPassword());

        ldapTemplate.unbind(UtilLDAP.generateUserDN(oldEmail));
        ldapTemplate.bind(UtilLDAP.generateUserDN(u.getEmail()), null, userAttributes);

        u = userRepository.save(u);
        return  u;
    }

}
