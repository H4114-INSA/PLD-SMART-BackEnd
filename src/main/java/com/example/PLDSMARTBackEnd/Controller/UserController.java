package com.example.PLDSMARTBackEnd.Controller;

import com.example.PLDSMARTBackEnd.Model.User;
import com.example.PLDSMARTBackEnd.Repository.UserRepository;
import com.example.PLDSMARTBackEnd.util.UtilLDAP;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ldap.core.LdapTemplate;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.naming.directory.Attribute;
import javax.naming.directory.Attributes;
import javax.naming.directory.BasicAttribute;
import javax.naming.directory.BasicAttributes;


@CrossOrigin
@RequestMapping(path = "/user")
@Controller
public class UserController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @Autowired
    private LdapTemplate ldapTemplate;

    @PostMapping(path="/add") // Map ONLY GET Requests
    public @ResponseBody
    String addNewUser (@RequestParam String firstName,
                       @RequestParam String lastName,
                       @RequestParam String email,
                       @RequestParam String biography, //TODO : faire la gestion des images
                       @RequestParam String password) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        if (firstName == "" || lastName == "" || email == "") {
            return "Parametre(s) incorrect(s).";
        }

        User user = new User();
        user.setFirstName(firstName);
        user.setLastName(lastName);
        user.setEmail(email);
        user.setBiography(biography);
        user.setHashPassword(password);

        //----- LDAP
        Attribute objectClass = new BasicAttribute("objectClass");
        {
            objectClass.add("top");
            objectClass.add("person");
            objectClass.add("organizationalPerson");
            objectClass.add("inetOrgPerson");
        }
        Attributes userAttributes = new BasicAttributes();
        userAttributes.put(objectClass);
        userAttributes.put("cn", firstName + " " + lastName);
        userAttributes.put("sn", lastName);
        userAttributes.put("uid", email);
        userAttributes.put("userPassword", password);
        ldapTemplate.bind(UtilLDAP.generateUserDN(email), null, userAttributes);
        //-----


        userRepository.save(user);
        return "Saved"; // TODO : Faire le message d'erreur en cas d'Ã©chec de l'ajout (boolean ?)
    }

    @GetMapping(path="/all")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }

    @GetMapping(path="/authentication")
    public @ResponseBody User authenticate(@RequestParam String email, @RequestParam String password){
        String filter = "(&(objectclass=person)(uid=" + email + "))";
        boolean auth = ldapTemplate.authenticate(UtilLDAP.generateUserDN(email), filter, password);
        if(auth == true){
            User u = userRepository.findByMail(email);
            return u;
        }else {
            return null;
        }
    }

    @PostMapping(path="/update")
    public @ResponseBody User update(@RequestParam int id,
                                     @RequestParam(required = false) String email,
                                     @RequestParam(required = false) String firstName,
                                     @RequestParam(required = false) String lastName,
                                     @RequestParam(required = false) String biography,
                                     @RequestParam(required = false) String hashPassword,
                                     @RequestParam(required = false) MultipartFile file ){

        int hasChanged = 0;
        User u = userRepository.findById(id);
        String oldEmail = u.getEmail();

        Attribute objectClass = new BasicAttribute("objectClass");
        {
            objectClass.add("top");
            objectClass.add("person");
            objectClass.add("organizationalPerson");
            objectClass.add("inetOrgPerson");
        }
        Attributes userAttributes = new BasicAttributes();
        userAttributes.put(objectClass);
        userAttributes.put("cn", u.getFirstName() + " " + u.getLastName());
        userAttributes.put("sn", u.getLastName());
        userAttributes.put("uid", u.getEmail());
        userAttributes.put("userPassword", u.getHashPassword());


        if(email != null){
            u.setEmail(email);
            userAttributes.put("uid", email);
            hasChanged++;
        }
        if (firstName != null){
            u.setFirstName(firstName);
        }
        if (lastName != null){
            u.setLastName(lastName);
            userAttributes.put("sn", lastName);
        }
        if(firstName != null || lastName != null){
            userAttributes.put("cn", firstName + " " + lastName);
            hasChanged++;
        }
        if(biography != null){
            u.setBiography(biography);
        }
        if(hashPassword != null){
            u.setHashPassword(hashPassword);
            userAttributes.put("userPassword", hashPassword);
            hasChanged++;
        }

        if(hasChanged != 0){
            ldapTemplate.unbind(UtilLDAP.generateUserDN(oldEmail));
            ldapTemplate.bind(UtilLDAP.generateUserDN(u.getEmail()), null, userAttributes);
        }

        u = userRepository.save(u);
        return  u;
    }

}
